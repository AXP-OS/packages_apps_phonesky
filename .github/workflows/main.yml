name: Update Phonesky

on:
  push:
    branches:
      - testci
  workflow_dispatch:  # button shown only when in default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    #- name: prep download
    #  uses: actions/checkout@v4
    #  with:
    #    repository: AXP-OS/tools_apk_downloader
    #    path: dl
        
    - name: Download APK + tools
      run: |
        wget -q -O apkmd "https://github.com/tanishqmanuja/apkmirror-downloader/releases/download/v1.0.6/apkmd"
        chmod +x apkmd
        
        # download play store
        APK="downloads/gp.apk"
        RETRY=5
        while [ $RETRY -gt 0 ];do
          ./apkmd apkmirror.json
          [ -f "$APK" ] && break
          RETRY=$(( RETRY - 1))
        done
        [ ! -f "$APK" ] && echo "ERROR: could not download apk" && exit 3

        # download & prepare apk tools
        mkdir -p ~/.local/bin
        wget -q -O ~/.local/bin/apktool "https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool"
        wget -q -O ~/.local/bin/apktool.jar "https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar"
        chmod +x ~/.local/bin/*
        export PATH=$(pwd)/.local/bin:$PATH
        apktool --version
        echo "local_apkname=$APK" >> $GITHUB_ENV

    - name: Patch APK
      run: |
        # https://github.com/r0adkll/sign-android-release/issues/84#issuecomment-1885690080
        BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
        echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
        echo Last build tool version is: $BUILD_TOOL_VERSION
        
        export PATH=$(pwd)/.local/bin:/usr/local/lib/android/sdk/build-tools/$BUILD_TOOL_VERSION:$PATH
        #DEBUG=yes
        APKTOOL_FLAGS=" --use-aapt2" ./patch-playstore ${{ env.local_apkname }}
        
        patched_apk=$(./patch-playstore printapk ${{ env.local_apkname }} | grep file: | cut -d ':' -f2)
        apk_version=$(./patch-playstore printapk ${{ env.local_apkname }} | grep playversion: | cut -d ':' -f2-3)
        echo "patched_apk=$patched_apk" >> $GITHUB_ENV
        echo "apk_version_short=${apk_version/:*}" >> $GITHUB_ENV
        echo "apk_version_uri=$(echo ${apk_version/-*:*} | tr '.' '-')" >> $GITHUB_ENV
        echo "apk_version_code=${apk_version/*:}" >> $GITHUB_ENV
        echo "apk_version_full=${apk_version/:*} (${apk_version/*:})" >> $GITHUB_ENV

        mkdir apks
        mv -v ${patched_apk}_zipaligned apks/Phonesky_AXP-OS.apk || mv -v ${patched_apk} apks/Phonesky_AXP-OS.apk

    # https://github.com/r0adkll/sign-android-release
    - name: Sign apks
      id: signAPK
      uses: r0adkll/sign-android-release@master
      with:
        releaseDirectory: apks
        signingKeyBase64: ${{ secrets.APK_SIGNING_KEY_64 }}
        alias: ${{ secrets.APK_ALIAS }}
        keyStorePassword: ${{ secrets.APK_KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.APK_KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

    - name: Hash release APKs (signed+unsigned)
      run: |
        cd apks
        echo "apk_sha_unsigned=$(sha256sum Phonesky_AXP-OS.apk|cut -d ' ' -f1)" >> $GITHUB_ENV
        echo "apk_sha_signed=$(sha256sum Phonesky_AXP-OS-signed.apk|cut -d ' ' -f1)" >> $GITHUB_ENV

    - name: Scan APKs by VirusTotal
      id: vt
      uses: crazy-max/ghaction-virustotal@v4.0.0
      with:
        # The GitHub token used to create an authenticated client for GitHub API
        vt_api_key: "${{ secrets.AXP_VT_API_KEY }}"
        # Newline-delimited list of path globs for asset files to upload for analysis
        files: |
          apks/Phonesky_AXP-OS.apk
          apks/Phonesky_AXP-OS-signed.apk
        # If enabled, analysis link(s) will be appended to the release body
        #update_release_body: true # default is false
        # The GitHub token used to create an authenticated client for GitHub API
        # github_token: # optional, default is ${{ github.token }}
        # API request-rate in requests/minute
        request_rate: 2

    - name: Prep release body
      run: |
        cd apks
        VTRES=$(echo '${{ steps.vt.outputs.analysis }}' | sed 's#apks/##g')
        for v in $(echo "$VTRES" | tr ',' ' ' );do
          a="${v/apk=*}apk"
          u="${v/*=http}"
          s=$(sha256sum $a | cut -d ' ' -f1)
          RES="$RES**$a**<br/>- hash: $s<br/>- Virustotal [scan result](http${u})<br/>"
        done   
        echo "vt_results=$RES" >> $GITHUB_ENV
      
    - name: Create Release
      uses: "softprops/action-gh-release@v2"
      with:
        token: "${{ secrets.AXP_GITHUB_TOKEN }}"
        name: "UNTESTED: ${{ env.apk_version_full }}"
        tag_name: "${{ env.apk_version_short }}_${{ env.apk_version_code }}"
        prerelease: true
        body: |
          ## Phonesky
          ${{ env.vt_results }}
          
          ## Origin source
          - APKMirror [link](https://www.apkmirror.com/apk/google-inc/google-play-store/google-play-store-${{ env.apk_version_uri }}-release/)
        #append_body: true
        files: |
          ${{ github.WORKSPACE }}/apks/Phonesky_AXP-OS.apk
          ${{ github.WORKSPACE }}/apks/Phonesky_AXP-OS-signed.apk

 #   - name: Upload signed APKs (latest)
 #     uses: "marvinpinto/action-automatic-releases@latest"
 #     with:
 #       repo_token: "${{ secrets.AXP_GITHUB_TOKEN }}"
 #       automatic_release_tag: "latest"
 #       prerelease: true
 #       title: "${{ env.OPENEUICC_VERSION }} (${{ env.git_sha_short }})"
 #       files: |
 #         ${{ github.WORKSPACE }}/apks/OpenEUICC-signed.apk
 #         ${{ github.WORKSPACE }}/apks/OpenEUICC-signed.apk.sha256
